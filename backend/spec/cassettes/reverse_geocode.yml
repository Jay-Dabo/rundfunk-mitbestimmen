---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/geocode/json?key=GOOGLE_API_KEY&language=en&latlng=49.0047,8.3858&sensor=false
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Wed, 22 Aug 2018 22:03:20 GMT
      Expires:
      - Thu, 23 Aug 2018 22:03:20 GMT
      Access-Control-Allow-Origin:
      - "*"
      Server:
      - mafe
      Content-Length:
      - '1385'
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - public, max-age=86400
      Age:
      - '2349'
      Alt-Svc:
      - quic=":443"; ma=2592000; v="44,43,39,35"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 22 Aug 2018 22:43:38 GMT
recorded_with: VCR 4.0.0
